// Code generated by go-swagger; DO NOT EDIT.

package vertex_address_validation_api_guest_cleanse_address_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"magento2go/models"
)

// VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostReader is a Reader for the VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPost structure.
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK creates a VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK with default headers values
func NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK() *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK {
	return &VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK{}
}

/* VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK describes a response with status code 200, with default header values.

200 Success.
*/
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK struct {
	Payload *models.VertexAddressValidationAPIDataCleansedAddressInterface
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK) Error() string {
	return fmt.Sprintf("[POST /V1/guest-address/cleanse][%d] vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostOK  %+v", 200, o.Payload)
}
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK) GetPayload() *models.VertexAddressValidationAPIDataCleansedAddressInterface {
	return o.Payload
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VertexAddressValidationAPIDataCleansedAddressInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest creates a VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest with default headers values
func NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest() *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest {
	return &VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest{}
}

/* VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest describes a response with status code 400, with default header values.

400 Bad Request
*/
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /V1/guest-address/cleanse][%d] vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBadRequest  %+v", 400, o.Payload)
}
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError creates a VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError with default headers values
func NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError() *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError {
	return &VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError{}
}

/* VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError describes a response with status code 500, with default header values.

Internal Server error
*/
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /V1/guest-address/cleanse][%d] vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostInternalServerError  %+v", 500, o.Payload)
}
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault creates a VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault with default headers values
func NewVertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault(code int) *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault {
	return &VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault{
		_statusCode: code,
	}
}

/* VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the vertex address validation Api guest cleanse address v1 cleanse address post default response
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault) Code() int {
	return o._statusCode
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault) Error() string {
	return fmt.Sprintf("[POST /V1/guest-address/cleanse][%d] vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPost default  %+v", o._statusCode, o.Payload)
}
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody vertex address validation API guest cleanse address v1 cleanse address post body
swagger:model VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody
*/
type VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody struct {

	// address
	// Required: true
	Address *models.VertexAddressValidationAPIDataAddressInterface `json:"address"`

	// Guest Cart ID (used for auth)
	// Required: true
	CartID *string `json:"cartId"`

	// scope code
	ScopeCode string `json:"scopeCode,omitempty"`

	// scope type
	ScopeType string `json:"scopeType,omitempty"`
}

// Validate validates this vertex address validation API guest cleanse address v1 cleanse address post body
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCartID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody"+"."+"address", "body", o.Address); err != nil {
		return err
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) validateCartID(formats strfmt.Registry) error {

	if err := validate.Required("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody"+"."+"cartId", "body", o.CartID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vertex address validation API guest cleanse address v1 cleanse address post body based on the context it is used
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {
		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexAddressValidationApiGuestCleanseAddressV1CleanseAddressPostBody" + "." + "address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody) UnmarshalBinary(b []byte) error {
	var res VertexAddressValidationAPIGuestCleanseAddressV1CleanseAddressPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
