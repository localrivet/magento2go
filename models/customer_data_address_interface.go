// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerDataAddressInterface Customer address interface.
//
// swagger:model customer-data-address-interface
type CustomerDataAddressInterface struct {

	// City name
	City string `json:"city,omitempty"`

	// Company
	Company string `json:"company,omitempty"`

	// Country code in ISO_3166-2 format
	CountryID string `json:"country_id,omitempty"`

	// Custom attributes values.
	CustomAttributes []*FrameworkAttributeInterface `json:"custom_attributes"`

	// Customer ID
	CustomerID int64 `json:"customer_id,omitempty"`

	// If this address is default billing address
	DefaultBilling bool `json:"default_billing,omitempty"`

	// If this address is default shipping address.
	DefaultShipping bool `json:"default_shipping,omitempty"`

	// extension attributes
	ExtensionAttributes CustomerDataAddressExtensionInterface `json:"extension_attributes,omitempty"`

	// Fax number
	Fax string `json:"fax,omitempty"`

	// First name
	Firstname string `json:"firstname,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// Last name
	Lastname string `json:"lastname,omitempty"`

	// Middle name
	Middlename string `json:"middlename,omitempty"`

	// Postcode
	Postcode string `json:"postcode,omitempty"`

	// Prefix
	Prefix string `json:"prefix,omitempty"`

	// region
	Region *CustomerDataRegionInterface `json:"region,omitempty"`

	// Region ID
	RegionID int64 `json:"region_id,omitempty"`

	// Street
	Street []string `json:"street"`

	// Suffix
	Suffix string `json:"suffix,omitempty"`

	// Telephone number
	Telephone string `json:"telephone,omitempty"`

	// Vat id
	VatID string `json:"vat_id,omitempty"`
}

// Validate validates this customer data address interface
func (m *CustomerDataAddressInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerDataAddressInterface) validateCustomAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerDataAddressInterface) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this customer data address interface based on the context it is used
func (m *CustomerDataAddressInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerDataAddressInterface) contextValidateCustomAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomAttributes); i++ {

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerDataAddressInterface) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {
		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDataAddressInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDataAddressInterface) UnmarshalBinary(b []byte) error {
	var res CustomerDataAddressInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
