// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryInStorePickupAPIDataSearchRequestFiltersInterface Filter to filter by Fields. Each field may be filtered with different condition type. Supported condition types restricted by @see \Magento\Framework\Api\SearchCriteriaInterface
//
// swagger:model inventory-in-store-pickup-api-data-search-request-filters-interface
type InventoryInStorePickupAPIDataSearchRequestFiltersInterface struct {

	// city
	City *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"city,omitempty"`

	// country
	Country *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"country,omitempty"`

	// name
	Name *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"name,omitempty"`

	// pickup location code
	PickupLocationCode *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"pickup_location_code,omitempty"`

	// postcode
	Postcode *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"postcode,omitempty"`

	// region
	Region *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"region,omitempty"`

	// region id
	RegionID *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"region_id,omitempty"`

	// street
	Street *InventoryInStorePickupAPIDataSearchRequestFilterInterface `json:"street,omitempty"`
}

// Validate validates this inventory in store pickup api data search request filters interface
func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupLocationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateCity(formats strfmt.Registry) error {
	if swag.IsZero(m.City) { // not required
		return nil
	}

	if m.City != nil {
		if err := m.City.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("city")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("city")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validatePickupLocationCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupLocationCode) { // not required
		return nil
	}

	if m.PickupLocationCode != nil {
		if err := m.PickupLocationCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickup_location_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickup_location_code")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validatePostcode(formats strfmt.Registry) error {
	if swag.IsZero(m.Postcode) { // not required
		return nil
	}

	if m.Postcode != nil {
		if err := m.Postcode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postcode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postcode")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateRegionID(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionID) { // not required
		return nil
	}

	if m.RegionID != nil {
		if err := m.RegionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region_id")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) validateStreet(formats strfmt.Registry) error {
	if swag.IsZero(m.Street) { // not required
		return nil
	}

	if m.Street != nil {
		if err := m.Street.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("street")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("street")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inventory in store pickup api data search request filters interface based on the context it is used
func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupLocationCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostcode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateCity(ctx context.Context, formats strfmt.Registry) error {

	if m.City != nil {
		if err := m.City.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("city")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("city")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateCountry(ctx context.Context, formats strfmt.Registry) error {

	if m.Country != nil {
		if err := m.Country.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidatePickupLocationCode(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupLocationCode != nil {
		if err := m.PickupLocationCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickup_location_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickup_location_code")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidatePostcode(ctx context.Context, formats strfmt.Registry) error {

	if m.Postcode != nil {
		if err := m.Postcode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postcode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postcode")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {
		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateRegionID(ctx context.Context, formats strfmt.Registry) error {

	if m.RegionID != nil {
		if err := m.RegionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region_id")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) contextValidateStreet(ctx context.Context, formats strfmt.Registry) error {

	if m.Street != nil {
		if err := m.Street.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("street")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("street")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryInStorePickupAPIDataSearchRequestFiltersInterface) UnmarshalBinary(b []byte) error {
	var res InventoryInStorePickupAPIDataSearchRequestFiltersInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
