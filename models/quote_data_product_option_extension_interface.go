// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QuoteDataProductOptionExtensionInterface ExtensionInterface class for @see \Magento\Quote\Api\Data\ProductOptionInterface
//
// swagger:model quote-data-product-option-extension-interface
type QuoteDataProductOptionExtensionInterface struct {

	// bundle options
	BundleOptions []*BundleDataBundleOptionInterface `json:"bundle_options"`

	// configurable item options
	ConfigurableItemOptions []*ConfigurableProductDataConfigurableItemOptionValueInterface `json:"configurable_item_options"`

	// custom options
	CustomOptions []*CatalogDataCustomOptionInterface `json:"custom_options"`

	// downloadable option
	DownloadableOption *DownloadableDataDownloadableOptionInterface `json:"downloadable_option,omitempty"`

	// grouped options
	GroupedOptions []*GroupedProductDataGroupedOptionsInterface `json:"grouped_options"`
}

// Validate validates this quote data product option extension interface
func (m *QuoteDataProductOptionExtensionInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurableItemOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadableOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupedOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) validateBundleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.BundleOptions); i++ {
		if swag.IsZero(m.BundleOptions[i]) { // not required
			continue
		}

		if m.BundleOptions[i] != nil {
			if err := m.BundleOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundle_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bundle_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) validateConfigurableItemOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurableItemOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurableItemOptions); i++ {
		if swag.IsZero(m.ConfigurableItemOptions[i]) { // not required
			continue
		}

		if m.ConfigurableItemOptions[i] != nil {
			if err := m.ConfigurableItemOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurable_item_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configurable_item_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) validateCustomOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomOptions); i++ {
		if swag.IsZero(m.CustomOptions[i]) { // not required
			continue
		}

		if m.CustomOptions[i] != nil {
			if err := m.CustomOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) validateDownloadableOption(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadableOption) { // not required
		return nil
	}

	if m.DownloadableOption != nil {
		if err := m.DownloadableOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadable_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadable_option")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) validateGroupedOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupedOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupedOptions); i++ {
		if swag.IsZero(m.GroupedOptions[i]) { // not required
			continue
		}

		if m.GroupedOptions[i] != nil {
			if err := m.GroupedOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("grouped_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("grouped_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this quote data product option extension interface based on the context it is used
func (m *QuoteDataProductOptionExtensionInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigurableItemOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownloadableOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupedOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) contextValidateBundleOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BundleOptions); i++ {

		if m.BundleOptions[i] != nil {
			if err := m.BundleOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundle_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bundle_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) contextValidateConfigurableItemOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigurableItemOptions); i++ {

		if m.ConfigurableItemOptions[i] != nil {
			if err := m.ConfigurableItemOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurable_item_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configurable_item_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) contextValidateCustomOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomOptions); i++ {

		if m.CustomOptions[i] != nil {
			if err := m.CustomOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) contextValidateDownloadableOption(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadableOption != nil {
		if err := m.DownloadableOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadable_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadable_option")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataProductOptionExtensionInterface) contextValidateGroupedOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupedOptions); i++ {

		if m.GroupedOptions[i] != nil {
			if err := m.GroupedOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("grouped_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("grouped_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteDataProductOptionExtensionInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteDataProductOptionExtensionInterface) UnmarshalBinary(b []byte) error {
	var res QuoteDataProductOptionExtensionInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
