// Code generated by go-swagger; DO NOT EDIT.

package quote_guest_cart_item_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new quote guest cart item repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote guest cart item repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	QuoteGuestCartItemRepositoryV1DeleteByIDDelete(params *QuoteGuestCartItemRepositoryV1DeleteByIDDeleteParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1DeleteByIDDeleteOK, error)

	QuoteGuestCartItemRepositoryV1GetListGet(params *QuoteGuestCartItemRepositoryV1GetListGetParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1GetListGetOK, error)

	QuoteGuestCartItemRepositoryV1SavePost(params *QuoteGuestCartItemRepositoryV1SavePostParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1SavePostOK, error)

	QuoteGuestCartItemRepositoryV1SavePut(params *QuoteGuestCartItemRepositoryV1SavePutParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1SavePutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  QuoteGuestCartItemRepositoryV1DeleteByIDDelete Remove the specified item from the specified cart.
*/
func (a *Client) QuoteGuestCartItemRepositoryV1DeleteByIDDelete(params *QuoteGuestCartItemRepositoryV1DeleteByIDDeleteParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartItemRepositoryV1DeleteByIDDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteGuestCartItemRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/guest-carts/{cartId}/items/{itemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteGuestCartItemRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteGuestCartItemRepositoryV1DeleteByIDDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QuoteGuestCartItemRepositoryV1DeleteByIDDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QuoteGuestCartItemRepositoryV1GetListGet List items that are assigned to a specified cart.
*/
func (a *Client) QuoteGuestCartItemRepositoryV1GetListGet(params *QuoteGuestCartItemRepositoryV1GetListGetParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartItemRepositoryV1GetListGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteGuestCartItemRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/guest-carts/{cartId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteGuestCartItemRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteGuestCartItemRepositoryV1GetListGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QuoteGuestCartItemRepositoryV1GetListGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QuoteGuestCartItemRepositoryV1SavePost Add/update the specified cart item.
*/
func (a *Client) QuoteGuestCartItemRepositoryV1SavePost(params *QuoteGuestCartItemRepositoryV1SavePostParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartItemRepositoryV1SavePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteGuestCartItemRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/guest-carts/{cartId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteGuestCartItemRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteGuestCartItemRepositoryV1SavePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QuoteGuestCartItemRepositoryV1SavePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QuoteGuestCartItemRepositoryV1SavePut Add/update the specified cart item.
*/
func (a *Client) QuoteGuestCartItemRepositoryV1SavePut(params *QuoteGuestCartItemRepositoryV1SavePutParams, opts ...ClientOption) (*QuoteGuestCartItemRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartItemRepositoryV1SavePutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteGuestCartItemRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/guest-carts/{cartId}/items/{itemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteGuestCartItemRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteGuestCartItemRepositoryV1SavePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QuoteGuestCartItemRepositoryV1SavePutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
