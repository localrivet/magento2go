// Code generated by go-swagger; DO NOT EDIT.

package customer_account_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer account management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer account management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerAccountManagementV1CreateAccountPost(params *CustomerAccountManagementV1CreateAccountPostParams, opts ...ClientOption) (*CustomerAccountManagementV1CreateAccountPostOK, error)

	CustomerAccountManagementV1InitiatePasswordResetPut(params *CustomerAccountManagementV1InitiatePasswordResetPutParams, opts ...ClientOption) (*CustomerAccountManagementV1InitiatePasswordResetPutOK, error)

	CustomerAccountManagementV1IsEmailAvailablePost(params *CustomerAccountManagementV1IsEmailAvailablePostParams, opts ...ClientOption) (*CustomerAccountManagementV1IsEmailAvailablePostOK, error)

	CustomerAccountManagementV1ResetPasswordPost(params *CustomerAccountManagementV1ResetPasswordPostParams, opts ...ClientOption) (*CustomerAccountManagementV1ResetPasswordPostOK, error)

	CustomerAccountManagementV1ValidateResetPasswordLinkTokenGet(params *CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetParams, opts ...ClientOption) (*CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CustomerAccountManagementV1CreateAccountPost Create customer account. Perform necessary business operations like sending email.
*/
func (a *Client) CustomerAccountManagementV1CreateAccountPost(params *CustomerAccountManagementV1CreateAccountPostParams, opts ...ClientOption) (*CustomerAccountManagementV1CreateAccountPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountManagementV1CreateAccountPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerAccountManagementV1CreateAccountPost",
		Method:             "POST",
		PathPattern:        "/V1/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountManagementV1CreateAccountPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountManagementV1CreateAccountPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerAccountManagementV1CreateAccountPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerAccountManagementV1InitiatePasswordResetPut Send an email to the customer with a password reset link.
*/
func (a *Client) CustomerAccountManagementV1InitiatePasswordResetPut(params *CustomerAccountManagementV1InitiatePasswordResetPutParams, opts ...ClientOption) (*CustomerAccountManagementV1InitiatePasswordResetPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountManagementV1InitiatePasswordResetPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerAccountManagementV1InitiatePasswordResetPut",
		Method:             "PUT",
		PathPattern:        "/V1/customers/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountManagementV1InitiatePasswordResetPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountManagementV1InitiatePasswordResetPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerAccountManagementV1InitiatePasswordResetPutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerAccountManagementV1IsEmailAvailablePost Check if given email is associated with a customer account in given website.
*/
func (a *Client) CustomerAccountManagementV1IsEmailAvailablePost(params *CustomerAccountManagementV1IsEmailAvailablePostParams, opts ...ClientOption) (*CustomerAccountManagementV1IsEmailAvailablePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountManagementV1IsEmailAvailablePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerAccountManagementV1IsEmailAvailablePost",
		Method:             "POST",
		PathPattern:        "/V1/customers/isEmailAvailable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountManagementV1IsEmailAvailablePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountManagementV1IsEmailAvailablePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerAccountManagementV1IsEmailAvailablePostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerAccountManagementV1ResetPasswordPost Reset customer password.
*/
func (a *Client) CustomerAccountManagementV1ResetPasswordPost(params *CustomerAccountManagementV1ResetPasswordPostParams, opts ...ClientOption) (*CustomerAccountManagementV1ResetPasswordPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountManagementV1ResetPasswordPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerAccountManagementV1ResetPasswordPost",
		Method:             "POST",
		PathPattern:        "/V1/customers/resetPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountManagementV1ResetPasswordPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountManagementV1ResetPasswordPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerAccountManagementV1ResetPasswordPostDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerAccountManagementV1ValidateResetPasswordLinkTokenGet Check if password reset token is valid.
*/
func (a *Client) CustomerAccountManagementV1ValidateResetPasswordLinkTokenGet(params *CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetParams, opts ...ClientOption) (*CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountManagementV1ValidateResetPasswordLinkTokenGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerAccountManagementV1ValidateResetPasswordLinkTokenGet",
		Method:             "GET",
		PathPattern:        "/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerAccountManagementV1ValidateResetPasswordLinkTokenGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
