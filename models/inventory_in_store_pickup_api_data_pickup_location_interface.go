// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryInStorePickupAPIDataPickupLocationInterface Represents sources projection on In-Store Pickup context. Realisation must follow immutable DTO concept. Partial immutability done according to restriction of current Extension Attributes implementation.
//
// swagger:model inventory-in-store-pickup-api-data-pickup-location-interface
type InventoryInStorePickupAPIDataPickupLocationInterface struct {

	// Pickup Location city.
	City string `json:"city,omitempty"`

	// Pickup Location contact name.
	ContactName string `json:"contact_name,omitempty"`

	// Pickup Location country ID.
	CountryID string `json:"country_id,omitempty"`

	// Pickup Location description.
	Description string `json:"description,omitempty"`

	// Pickup Location contact email.
	Email string `json:"email,omitempty"`

	// extension attributes
	ExtensionAttributes InventoryInStorePickupAPIDataPickupLocationExtensionInterface `json:"extension_attributes,omitempty"`

	// Fax contact info.
	Fax string `json:"fax,omitempty"`

	// Pickup Location latitude.
	Latitude float64 `json:"latitude,omitempty"`

	// Pickup Location longitude.
	Longitude float64 `json:"longitude,omitempty"`

	// Pickup Location name.
	Name string `json:"name,omitempty"`

	// Pickup Location phone.
	Phone string `json:"phone,omitempty"`

	// Source code of Pickup Location.
	// Required: true
	PickupLocationCode *string `json:"pickup_location_code"`

	// Pickup Location postcode.
	Postcode string `json:"postcode,omitempty"`

	// Pickup Location region.
	Region string `json:"region,omitempty"`

	// Pickup Location region ID.
	RegionID int64 `json:"region_id,omitempty"`

	// Pickup Location street.
	Street string `json:"street,omitempty"`
}

// Validate validates this inventory in store pickup api data pickup location interface
func (m *InventoryInStorePickupAPIDataPickupLocationInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePickupLocationCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryInStorePickupAPIDataPickupLocationInterface) validatePickupLocationCode(formats strfmt.Registry) error {

	if err := validate.Required("pickup_location_code", "body", m.PickupLocationCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this inventory in store pickup api data pickup location interface based on context it is used
func (m *InventoryInStorePickupAPIDataPickupLocationInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InventoryInStorePickupAPIDataPickupLocationInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryInStorePickupAPIDataPickupLocationInterface) UnmarshalBinary(b []byte) error {
	var res InventoryInStorePickupAPIDataPickupLocationInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
