// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AmazonPaymentDataQuoteLinkInterface amazon payment data quote link interface
//
// swagger:model amazon-payment-data-quote-link-interface
type AmazonPaymentDataQuoteLinkInterface struct {

	// Amazon order reference id
	// Required: true
	AmazonOrderReferenceID *string `json:"amazon_order_reference_id"`

	// Quote confirmed with amazon
	// Required: true
	Confirmed *bool `json:"confirmed"`

	// id
	// Required: true
	ID *string `json:"id"`

	// Quote id
	// Required: true
	QuoteID *int64 `json:"quote_id"`

	// Sandbox simulation reference
	// Required: true
	SandboxSimulationReference *string `json:"sandbox_simulation_reference"`
}

// Validate validates this amazon payment data quote link interface
func (m *AmazonPaymentDataQuoteLinkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxSimulationReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmazonPaymentDataQuoteLinkInterface) validateAmazonOrderReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("amazon_order_reference_id", "body", m.AmazonOrderReferenceID); err != nil {
		return err
	}

	return nil
}

func (m *AmazonPaymentDataQuoteLinkInterface) validateConfirmed(formats strfmt.Registry) error {

	if err := validate.Required("confirmed", "body", m.Confirmed); err != nil {
		return err
	}

	return nil
}

func (m *AmazonPaymentDataQuoteLinkInterface) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AmazonPaymentDataQuoteLinkInterface) validateQuoteID(formats strfmt.Registry) error {

	if err := validate.Required("quote_id", "body", m.QuoteID); err != nil {
		return err
	}

	return nil
}

func (m *AmazonPaymentDataQuoteLinkInterface) validateSandboxSimulationReference(formats strfmt.Registry) error {

	if err := validate.Required("sandbox_simulation_reference", "body", m.SandboxSimulationReference); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this amazon payment data quote link interface based on context it is used
func (m *AmazonPaymentDataQuoteLinkInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AmazonPaymentDataQuoteLinkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmazonPaymentDataQuoteLinkInterface) UnmarshalBinary(b []byte) error {
	var res AmazonPaymentDataQuoteLinkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
