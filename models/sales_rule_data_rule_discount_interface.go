// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesRuleDataRuleDiscountInterface Rule discount Interface
//
// swagger:model sales-rule-data-rule-discount-interface
type SalesRuleDataRuleDiscountInterface struct {

	// discount data
	// Required: true
	DiscountData *SalesRuleDataDiscountDataInterface `json:"discount_data"`

	// Rule ID
	// Required: true
	RuleID *int64 `json:"rule_id"`

	// Rule Label
	// Required: true
	RuleLabel *string `json:"rule_label"`
}

// Validate validates this sales rule data rule discount interface
func (m *SalesRuleDataRuleDiscountInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesRuleDataRuleDiscountInterface) validateDiscountData(formats strfmt.Registry) error {

	if err := validate.Required("discount_data", "body", m.DiscountData); err != nil {
		return err
	}

	if m.DiscountData != nil {
		if err := m.DiscountData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_data")
			}
			return err
		}
	}

	return nil
}

func (m *SalesRuleDataRuleDiscountInterface) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleDiscountInterface) validateRuleLabel(formats strfmt.Registry) error {

	if err := validate.Required("rule_label", "body", m.RuleLabel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sales rule data rule discount interface based on the context it is used
func (m *SalesRuleDataRuleDiscountInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscountData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesRuleDataRuleDiscountInterface) contextValidateDiscountData(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscountData != nil {
		if err := m.DiscountData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesRuleDataRuleDiscountInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesRuleDataRuleDiscountInterface) UnmarshalBinary(b []byte) error {
	var res SalesRuleDataRuleDiscountInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
